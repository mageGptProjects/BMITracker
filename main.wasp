app BMITracker {
  wasp: {
    version: "^0.11.4"
  },
  title: "BMITracker",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int      @id @default(autoincrement())
    username String   @unique
    password String
    records  Record[]
psl=}

entity Record {=psl
    id     Int      @id @default(autoincrement())
    date   DateTime @default(now())
    bmi    Float
    user   User     @relation(fields: [userId], references: [id])
    userId Int
psl=}

action createRecord {
  fn: import { createRecord } from "@server/actions.js",
  entities: [Record]
}

action deleteRecord {
  fn: import { deleteRecord } from "@server/actions.js",
  entities: [Record]
}

query getRecords {
  fn: import { getRecords } from "@server/queries.js",
  entities: [Record]
}

query getRecord {
  fn: import { getRecord } from "@server/queries.js",
  entities: [Record]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route RecordRoute { path: "/record/:recordId", to: RecordPage }
page RecordPage {
  component: import { RecordPage } from "@client/pages/Record.jsx",
  authRequired: true
}
